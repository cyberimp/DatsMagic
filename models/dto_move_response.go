// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtoMoveResponse dto move response
//
// swagger:model dto.MoveResponse
type DtoMoveResponse struct {

	// anomalies
	Anomalies []*ViewAnomaly `json:"anomalies"`

	// attack cooldown ms
	// Example: 1000
	AttackCooldownMs int64 `json:"attackCooldownMs,omitempty"`

	// attack damage
	// Example: 10
	AttackDamage int64 `json:"attackDamage,omitempty"`

	// attack explosion radius
	// Example: 10
	AttackExplosionRadius float64 `json:"attackExplosionRadius,omitempty"`

	// attack range
	// Example: 10
	AttackRange float64 `json:"attackRange,omitempty"`

	// bounties
	Bounties []*ViewBounty `json:"bounties"`

	// enemies
	Enemies []*ViewEnemy `json:"enemies"`

	// errors
	Errors []string `json:"errors"`

	// map size
	MapSize *PlaneCoordinate `json:"mapSize,omitempty"`

	// max accel
	// Example: 1
	MaxAccel float64 `json:"maxAccel,omitempty"`

	// max speed
	// Example: 10
	MaxSpeed float64 `json:"maxSpeed,omitempty"`

	// name
	// Example: player1
	Name string `json:"name,omitempty"`

	// points
	// Example: 100
	Points int64 `json:"points,omitempty"`

	// revive timeout sec
	// Example: 2
	ReviveTimeoutSec int64 `json:"reviveTimeoutSec,omitempty"`

	// shield cooldown ms
	// Example: 10000
	ShieldCooldownMs int64 `json:"shieldCooldownMs,omitempty"`

	// shield time ms
	// Example: 5000
	ShieldTimeMs int64 `json:"shieldTimeMs,omitempty"`

	// transport radius
	// Example: 5
	TransportRadius int64 `json:"transportRadius,omitempty"`

	// transports
	Transports []*ViewTransport `json:"transports"`

	// wanted list
	WantedList []*ViewEnemy `json:"wantedList"`
}

// Validate validates this dto move response
func (m *DtoMoveResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnomalies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBounties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnemies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWantedList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoMoveResponse) validateAnomalies(formats strfmt.Registry) error {
	if swag.IsZero(m.Anomalies) { // not required
		return nil
	}

	for i := 0; i < len(m.Anomalies); i++ {
		if swag.IsZero(m.Anomalies[i]) { // not required
			continue
		}

		if m.Anomalies[i] != nil {
			if err := m.Anomalies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("anomalies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("anomalies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) validateBounties(formats strfmt.Registry) error {
	if swag.IsZero(m.Bounties) { // not required
		return nil
	}

	for i := 0; i < len(m.Bounties); i++ {
		if swag.IsZero(m.Bounties[i]) { // not required
			continue
		}

		if m.Bounties[i] != nil {
			if err := m.Bounties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bounties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bounties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) validateEnemies(formats strfmt.Registry) error {
	if swag.IsZero(m.Enemies) { // not required
		return nil
	}

	for i := 0; i < len(m.Enemies); i++ {
		if swag.IsZero(m.Enemies[i]) { // not required
			continue
		}

		if m.Enemies[i] != nil {
			if err := m.Enemies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enemies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enemies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) validateMapSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MapSize) { // not required
		return nil
	}

	if m.MapSize != nil {
		if err := m.MapSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapSize")
			}
			return err
		}
	}

	return nil
}

func (m *DtoMoveResponse) validateTransports(formats strfmt.Registry) error {
	if swag.IsZero(m.Transports) { // not required
		return nil
	}

	for i := 0; i < len(m.Transports); i++ {
		if swag.IsZero(m.Transports[i]) { // not required
			continue
		}

		if m.Transports[i] != nil {
			if err := m.Transports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) validateWantedList(formats strfmt.Registry) error {
	if swag.IsZero(m.WantedList) { // not required
		return nil
	}

	for i := 0; i < len(m.WantedList); i++ {
		if swag.IsZero(m.WantedList[i]) { // not required
			continue
		}

		if m.WantedList[i] != nil {
			if err := m.WantedList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wantedList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("wantedList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dto move response based on the context it is used
func (m *DtoMoveResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnomalies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBounties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnemies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMapSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWantedList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtoMoveResponse) contextValidateAnomalies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Anomalies); i++ {

		if m.Anomalies[i] != nil {

			if swag.IsZero(m.Anomalies[i]) { // not required
				return nil
			}

			if err := m.Anomalies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("anomalies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("anomalies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) contextValidateBounties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bounties); i++ {

		if m.Bounties[i] != nil {

			if swag.IsZero(m.Bounties[i]) { // not required
				return nil
			}

			if err := m.Bounties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bounties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bounties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) contextValidateEnemies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Enemies); i++ {

		if m.Enemies[i] != nil {

			if swag.IsZero(m.Enemies[i]) { // not required
				return nil
			}

			if err := m.Enemies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enemies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enemies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) contextValidateMapSize(ctx context.Context, formats strfmt.Registry) error {

	if m.MapSize != nil {

		if swag.IsZero(m.MapSize) { // not required
			return nil
		}

		if err := m.MapSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapSize")
			}
			return err
		}
	}

	return nil
}

func (m *DtoMoveResponse) contextValidateTransports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transports); i++ {

		if m.Transports[i] != nil {

			if swag.IsZero(m.Transports[i]) { // not required
				return nil
			}

			if err := m.Transports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtoMoveResponse) contextValidateWantedList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WantedList); i++ {

		if m.WantedList[i] != nil {

			if swag.IsZero(m.WantedList[i]) { // not required
				return nil
			}

			if err := m.WantedList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wantedList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("wantedList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtoMoveResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtoMoveResponse) UnmarshalBinary(b []byte) error {
	var res DtoMoveResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
