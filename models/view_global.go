// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewGlobal view global
//
// swagger:model view.Global
type ViewGlobal struct {

	// anomalies
	Anomalies []*ViewAnomaly `json:"anomalies"`

	// bounties
	Bounties []*ViewBounty `json:"bounties"`

	// map size
	MapSize *PlaneCoordinate `json:"mapSize,omitempty"`

	// players
	Players []*ViewGlobalPlayer `json:"players"`
}

// Validate validates this view global
func (m *ViewGlobal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnomalies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBounties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewGlobal) validateAnomalies(formats strfmt.Registry) error {
	if swag.IsZero(m.Anomalies) { // not required
		return nil
	}

	for i := 0; i < len(m.Anomalies); i++ {
		if swag.IsZero(m.Anomalies[i]) { // not required
			continue
		}

		if m.Anomalies[i] != nil {
			if err := m.Anomalies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("anomalies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("anomalies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewGlobal) validateBounties(formats strfmt.Registry) error {
	if swag.IsZero(m.Bounties) { // not required
		return nil
	}

	for i := 0; i < len(m.Bounties); i++ {
		if swag.IsZero(m.Bounties[i]) { // not required
			continue
		}

		if m.Bounties[i] != nil {
			if err := m.Bounties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bounties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bounties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewGlobal) validateMapSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MapSize) { // not required
		return nil
	}

	if m.MapSize != nil {
		if err := m.MapSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapSize")
			}
			return err
		}
	}

	return nil
}

func (m *ViewGlobal) validatePlayers(formats strfmt.Registry) error {
	if swag.IsZero(m.Players) { // not required
		return nil
	}

	for i := 0; i < len(m.Players); i++ {
		if swag.IsZero(m.Players[i]) { // not required
			continue
		}

		if m.Players[i] != nil {
			if err := m.Players[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("players" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("players" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this view global based on the context it is used
func (m *ViewGlobal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnomalies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBounties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMapSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlayers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewGlobal) contextValidateAnomalies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Anomalies); i++ {

		if m.Anomalies[i] != nil {

			if swag.IsZero(m.Anomalies[i]) { // not required
				return nil
			}

			if err := m.Anomalies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("anomalies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("anomalies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewGlobal) contextValidateBounties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bounties); i++ {

		if m.Bounties[i] != nil {

			if swag.IsZero(m.Bounties[i]) { // not required
				return nil
			}

			if err := m.Bounties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bounties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bounties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewGlobal) contextValidateMapSize(ctx context.Context, formats strfmt.Registry) error {

	if m.MapSize != nil {

		if swag.IsZero(m.MapSize) { // not required
			return nil
		}

		if err := m.MapSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapSize")
			}
			return err
		}
	}

	return nil
}

func (m *ViewGlobal) contextValidatePlayers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Players); i++ {

		if m.Players[i] != nil {

			if swag.IsZero(m.Players[i]) { // not required
				return nil
			}

			if err := m.Players[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("players" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("players" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewGlobal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewGlobal) UnmarshalBinary(b []byte) error {
	var res ViewGlobal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
