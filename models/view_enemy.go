// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewEnemy view enemy
//
// swagger:model view.Enemy
type ViewEnemy struct {

	// health
	// Example: 100
	Health int64 `json:"health,omitempty"`

	// kill bounty
	// Example: 10
	KillBounty int64 `json:"killBounty,omitempty"`

	// shield left ms
	// Example: 5000
	ShieldLeftMs int64 `json:"shieldLeftMs,omitempty"`

	// status
	// Example: alive
	// Enum: ["alive","dead"]
	Status string `json:"status,omitempty"`

	// velocity
	Velocity *PlaneVector `json:"velocity,omitempty"`

	// x
	// Example: 1
	// Required: true
	X *int64 `json:"x"`

	// y
	// Example: 1
	// Required: true
	Y *int64 `json:"y"`
}

// Validate validates this view enemy
func (m *ViewEnemy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVelocity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateY(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var viewEnemyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alive","dead"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewEnemyTypeStatusPropEnum = append(viewEnemyTypeStatusPropEnum, v)
	}
}

const (

	// ViewEnemyStatusAlive captures enum value "alive"
	ViewEnemyStatusAlive string = "alive"

	// ViewEnemyStatusDead captures enum value "dead"
	ViewEnemyStatusDead string = "dead"
)

// prop value enum
func (m *ViewEnemy) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewEnemyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewEnemy) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ViewEnemy) validateVelocity(formats strfmt.Registry) error {
	if swag.IsZero(m.Velocity) { // not required
		return nil
	}

	if m.Velocity != nil {
		if err := m.Velocity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("velocity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("velocity")
			}
			return err
		}
	}

	return nil
}

func (m *ViewEnemy) validateX(formats strfmt.Registry) error {

	if err := validate.Required("x", "body", m.X); err != nil {
		return err
	}

	return nil
}

func (m *ViewEnemy) validateY(formats strfmt.Registry) error {

	if err := validate.Required("y", "body", m.Y); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this view enemy based on the context it is used
func (m *ViewEnemy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVelocity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewEnemy) contextValidateVelocity(ctx context.Context, formats strfmt.Registry) error {

	if m.Velocity != nil {

		if swag.IsZero(m.Velocity) { // not required
			return nil
		}

		if err := m.Velocity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("velocity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("velocity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewEnemy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewEnemy) UnmarshalBinary(b []byte) error {
	var res ViewEnemy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
