// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommandTransport command transport
//
// swagger:model command.Transport
type CommandTransport struct {

	// acceleration
	Acceleration *PlaneVector `json:"acceleration,omitempty"`

	// activate shield
	ActivateShield bool `json:"activateShield,omitempty"`

	// attack
	Attack *PlaneCoordinate `json:"attack,omitempty"`

	// id
	// Example: 00000000-0000-0000-0000-000000000000
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this command transport
func (m *CommandTransport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceleration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandTransport) validateAcceleration(formats strfmt.Registry) error {
	if swag.IsZero(m.Acceleration) { // not required
		return nil
	}

	if m.Acceleration != nil {
		if err := m.Acceleration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceleration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acceleration")
			}
			return err
		}
	}

	return nil
}

func (m *CommandTransport) validateAttack(formats strfmt.Registry) error {
	if swag.IsZero(m.Attack) { // not required
		return nil
	}

	if m.Attack != nil {
		if err := m.Attack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attack")
			}
			return err
		}
	}

	return nil
}

func (m *CommandTransport) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this command transport based on the context it is used
func (m *CommandTransport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcceleration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandTransport) contextValidateAcceleration(ctx context.Context, formats strfmt.Registry) error {

	if m.Acceleration != nil {

		if swag.IsZero(m.Acceleration) { // not required
			return nil
		}

		if err := m.Acceleration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceleration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acceleration")
			}
			return err
		}
	}

	return nil
}

func (m *CommandTransport) contextValidateAttack(ctx context.Context, formats strfmt.Registry) error {

	if m.Attack != nil {

		if swag.IsZero(m.Attack) { // not required
			return nil
		}

		if err := m.Attack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attack")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommandTransport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandTransport) UnmarshalBinary(b []byte) error {
	var res CommandTransport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
